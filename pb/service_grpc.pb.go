// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSyncClient is the client API for FileSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSyncClient interface {
	CheckChunk(ctx context.Context, in *ChunkInfo, opts ...grpc.CallOption) (*CheckResult, error)
	SyncFileChunk(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*SyncChunkResult, error)
	ReadFolderFiles(ctx context.Context, in *RemoteFilesMessage, opts ...grpc.CallOption) (*RemoteFilesResult, error)
	GetRemoteFileChunkInfo(ctx context.Context, in *GetRemoteChunkInfoMessage, opts ...grpc.CallOption) (*RemoteChunkInfo, error)
	GetRemoteFileChunk(ctx context.Context, in *GetRemoteChunkMessage, opts ...grpc.CallOption) (*RemoteChunk, error)
	SyncFileList(ctx context.Context, in *SyncFileListMessage, opts ...grpc.CallOption) (*BaseResponse, error)
}

type fileSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSyncClient(cc grpc.ClientConnInterface) FileSyncClient {
	return &fileSyncClient{cc}
}

func (c *fileSyncClient) CheckChunk(ctx context.Context, in *ChunkInfo, opts ...grpc.CallOption) (*CheckResult, error) {
	out := new(CheckResult)
	err := c.cc.Invoke(ctx, "/FileSync/CheckChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncClient) SyncFileChunk(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*SyncChunkResult, error) {
	out := new(SyncChunkResult)
	err := c.cc.Invoke(ctx, "/FileSync/SyncFileChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncClient) ReadFolderFiles(ctx context.Context, in *RemoteFilesMessage, opts ...grpc.CallOption) (*RemoteFilesResult, error) {
	out := new(RemoteFilesResult)
	err := c.cc.Invoke(ctx, "/FileSync/ReadFolderFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncClient) GetRemoteFileChunkInfo(ctx context.Context, in *GetRemoteChunkInfoMessage, opts ...grpc.CallOption) (*RemoteChunkInfo, error) {
	out := new(RemoteChunkInfo)
	err := c.cc.Invoke(ctx, "/FileSync/GetRemoteFileChunkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncClient) GetRemoteFileChunk(ctx context.Context, in *GetRemoteChunkMessage, opts ...grpc.CallOption) (*RemoteChunk, error) {
	out := new(RemoteChunk)
	err := c.cc.Invoke(ctx, "/FileSync/GetRemoteFileChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSyncClient) SyncFileList(ctx context.Context, in *SyncFileListMessage, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/FileSync/SyncFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSyncServer is the server API for FileSync service.
// All implementations must embed UnimplementedFileSyncServer
// for forward compatibility
type FileSyncServer interface {
	CheckChunk(context.Context, *ChunkInfo) (*CheckResult, error)
	SyncFileChunk(context.Context, *Chunk) (*SyncChunkResult, error)
	ReadFolderFiles(context.Context, *RemoteFilesMessage) (*RemoteFilesResult, error)
	GetRemoteFileChunkInfo(context.Context, *GetRemoteChunkInfoMessage) (*RemoteChunkInfo, error)
	GetRemoteFileChunk(context.Context, *GetRemoteChunkMessage) (*RemoteChunk, error)
	SyncFileList(context.Context, *SyncFileListMessage) (*BaseResponse, error)
	mustEmbedUnimplementedFileSyncServer()
}

// UnimplementedFileSyncServer must be embedded to have forward compatible implementations.
type UnimplementedFileSyncServer struct {
}

func (UnimplementedFileSyncServer) CheckChunk(context.Context, *ChunkInfo) (*CheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChunk not implemented")
}
func (UnimplementedFileSyncServer) SyncFileChunk(context.Context, *Chunk) (*SyncChunkResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFileChunk not implemented")
}
func (UnimplementedFileSyncServer) ReadFolderFiles(context.Context, *RemoteFilesMessage) (*RemoteFilesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFolderFiles not implemented")
}
func (UnimplementedFileSyncServer) GetRemoteFileChunkInfo(context.Context, *GetRemoteChunkInfoMessage) (*RemoteChunkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteFileChunkInfo not implemented")
}
func (UnimplementedFileSyncServer) GetRemoteFileChunk(context.Context, *GetRemoteChunkMessage) (*RemoteChunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoteFileChunk not implemented")
}
func (UnimplementedFileSyncServer) SyncFileList(context.Context, *SyncFileListMessage) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFileList not implemented")
}
func (UnimplementedFileSyncServer) mustEmbedUnimplementedFileSyncServer() {}

// UnsafeFileSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSyncServer will
// result in compilation errors.
type UnsafeFileSyncServer interface {
	mustEmbedUnimplementedFileSyncServer()
}

func RegisterFileSyncServer(s grpc.ServiceRegistrar, srv FileSyncServer) {
	s.RegisterService(&FileSync_ServiceDesc, srv)
}

func _FileSync_CheckChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).CheckChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/CheckChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).CheckChunk(ctx, req.(*ChunkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSync_SyncFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).SyncFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/SyncFileChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).SyncFileChunk(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSync_ReadFolderFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteFilesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).ReadFolderFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/ReadFolderFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).ReadFolderFiles(ctx, req.(*RemoteFilesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSync_GetRemoteFileChunkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteChunkInfoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).GetRemoteFileChunkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/GetRemoteFileChunkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).GetRemoteFileChunkInfo(ctx, req.(*GetRemoteChunkInfoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSync_GetRemoteFileChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteChunkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).GetRemoteFileChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/GetRemoteFileChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).GetRemoteFileChunk(ctx, req.(*GetRemoteChunkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSync_SyncFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFileListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSyncServer).SyncFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSync/SyncFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSyncServer).SyncFileList(ctx, req.(*SyncFileListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSync_ServiceDesc is the grpc.ServiceDesc for FileSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileSync",
	HandlerType: (*FileSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckChunk",
			Handler:    _FileSync_CheckChunk_Handler,
		},
		{
			MethodName: "SyncFileChunk",
			Handler:    _FileSync_SyncFileChunk_Handler,
		},
		{
			MethodName: "ReadFolderFiles",
			Handler:    _FileSync_ReadFolderFiles_Handler,
		},
		{
			MethodName: "GetRemoteFileChunkInfo",
			Handler:    _FileSync_GetRemoteFileChunkInfo_Handler,
		},
		{
			MethodName: "GetRemoteFileChunk",
			Handler:    _FileSync_GetRemoteFileChunk_Handler,
		},
		{
			MethodName: "SyncFileList",
			Handler:    _FileSync_SyncFileList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
